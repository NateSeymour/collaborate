/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: Swifteams.proto */

#ifndef PROTOBUF_C_Swifteams_2eproto__INCLUDED
#define PROTOBUF_C_Swifteams_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/timestamp.pb-c.h"

typedef struct Coordinates Coordinates;
typedef struct PluginDefinition PluginDefinition;
typedef struct PluginStoreDefinition PluginStoreDefinition;
typedef struct PluginStoreDefinition__MembersEntry PluginStoreDefinition__MembersEntry;
typedef struct PluginManifest PluginManifest;
typedef struct PluginManifest__StoreEntry PluginManifest__StoreEntry;
typedef struct User User;
typedef struct Pointer Pointer;
typedef struct PointerCollection PointerCollection;
typedef struct Client Client;
typedef struct ClientChatMessage ClientChatMessage;
typedef struct ClientMessage ClientMessage;
typedef struct ServerMessage ServerMessage;
typedef struct RoomConfiguration RoomConfiguration;


/* --- enums --- */

/*
 * COMMON TYPES 
 */
typedef enum _PointerType {
  POINTER_TYPE__POINTER_TYPE_UNSPECIFIED = 0,
  POINTER_TYPE__POINTER_TYPE_POINTER = 1,
  POINTER_TYPE__POINTER_TYPE_CURSOR = 2,
  POINTER_TYPE__POINTER_TYPE_TOUCH = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(POINTER_TYPE)
} PointerType;
/*
 * STORE 
 */
typedef enum _StoreMemberType {
  STORE_MEMBER_TYPE__MEMBER_UNSPECIFIED = 0,
  STORE_MEMBER_TYPE__STRING = 1,
  STORE_MEMBER_TYPE__NUMBER = 2,
  STORE_MEMBER_TYPE__BOOLEAN = 5,
  STORE_MEMBER_TYPE__TIMESTAMP = 6,
  STORE_MEMBER_TYPE__COORDINATE = 3,
  STORE_MEMBER_TYPE__USER = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STORE_MEMBER_TYPE)
} StoreMemberType;
typedef enum _StoreAccessType {
  STORE_ACCESS_TYPE__ACCESS_UNSPECIFIED = 0,
  STORE_ACCESS_TYPE__PUBLIC = 1,
  STORE_ACCESS_TYPE__PRODUCER = 2,
  STORE_ACCESS_TYPE__HOST = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STORE_ACCESS_TYPE)
} StoreAccessType;
typedef enum _StorePersistenceType {
  STORE_PERSISTENCE_TYPE__PERSISTENCE_UNSPECIFIED = 0,
  STORE_PERSISTENCE_TYPE__NONE = 1,
  STORE_PERSISTENCE_TYPE__PREFERRED = 2,
  STORE_PERSISTENCE_TYPE__REQUIRED = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(STORE_PERSISTENCE_TYPE)
} StorePersistenceType;
/*
 * USER 
 */
typedef enum _UserSubscriptionType {
  USER_SUBSCRIPTION_TYPE__USER_SUBSCRIPTION_UNSPECIFIED = 0,
  USER_SUBSCRIPTION_TYPE__USER_SUBSCRIPTION_FREE = 1,
  USER_SUBSCRIPTION_TYPE__USER_SUBSCRIPTION_PREMIUM = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(USER_SUBSCRIPTION_TYPE)
} UserSubscriptionType;
typedef enum _ClientRole {
  CLIENT_ROLE__CLIENT_ROLE_UNSPECIFIED = 0,
  CLIENT_ROLE__GUEST = 1,
  CLIENT_ROLE__ROOM_OWNER = 2,
  CLIENT_ROLE__SERVER_ADMIN = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIENT_ROLE)
} ClientRole;
typedef enum _ClientMessageType {
  CLIENT_MESSAGE_TYPE__CLIENT_MESSAGE_TYPE_UNSPECIFIED = 0,
  CLIENT_MESSAGE_TYPE__UPDATE_NICKNAME = 1,
  CLIENT_MESSAGE_TYPE__UPDATE_POINTERS = 2,
  CLIENT_MESSAGE_TYPE__CHAT_MESSAGE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIENT_MESSAGE_TYPE)
} ClientMessageType;
/*
 * CONNECTION 
 */
typedef enum _CloseCode {
  CLOSE_CODE__CLOSE_CODE_UNSPECIFIED = 0,
  CLOSE_CODE__CLOSE_CODE_NORMAL = 1006,
  CLOSE_CODE__CLOSE_CODE_UNAUTHORIZED = 4401,
  CLOSE_CODE__CLOSE_CODE_NOTFOUND = 4404,
  CLOSE_CODE__CLOSE_CODE_CLIENT_USER_REQUESTED = 4100,
  CLOSE_CODE__CLOSE_CODE_ROOM_EXPIRED = 4001
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLOSE_CODE)
} CloseCode;
/*
 * SERVER 
 */
typedef enum _ServerMessageType {
  SERVER_MESSAGE_TYPE__SERVER_MESSAGE_UNSPECIFIED = 0,
  SERVER_MESSAGE_TYPE__RELAY = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SERVER_MESSAGE_TYPE)
} ServerMessageType;
/*
 * ROOM 
 */
typedef enum _RoomType {
  ROOM_TYPE__ROOM_TYPE_UNSPECIFIED = 0,
  ROOM_TYPE__STANDARD = 1,
  ROOM_TYPE__FREE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ROOM_TYPE)
} RoomType;

/* --- messages --- */

struct  Coordinates
{
  ProtobufCMessage base;
  double x;
  double y;
};
#define COORDINATES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&coordinates__descriptor) \
, 0, 0 }


/*
 * PLUGINS 
 */
struct  PluginDefinition
{
  ProtobufCMessage base;
  char *name;
  char *description;
  char *version;
  size_t n_dependencies;
  char **dependencies;
};
#define PLUGIN_DEFINITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plugin_definition__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


struct  PluginStoreDefinition__MembersEntry
{
  ProtobufCMessage base;
  char *key;
  StoreMemberType value;
};
#define PLUGIN_STORE_DEFINITION__MEMBERS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plugin_store_definition__members_entry__descriptor) \
, (char *)protobuf_c_empty_string, STORE_MEMBER_TYPE__MEMBER_UNSPECIFIED }


struct  PluginStoreDefinition
{
  ProtobufCMessage base;
  size_t n_members;
  PluginStoreDefinition__MembersEntry **members;
};
#define PLUGIN_STORE_DEFINITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plugin_store_definition__descriptor) \
, 0,NULL }


struct  PluginManifest__StoreEntry
{
  ProtobufCMessage base;
  char *key;
  PluginStoreDefinition *value;
};
#define PLUGIN_MANIFEST__STORE_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plugin_manifest__store_entry__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


struct  PluginManifest
{
  ProtobufCMessage base;
  uint32_t manifest_version;
  PluginDefinition *plugin;
  size_t n_store;
  PluginManifest__StoreEntry **store;
};
#define PLUGIN_MANIFEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plugin_manifest__descriptor) \
, 0, NULL, 0,NULL }


struct  User
{
  ProtobufCMessage base;
  UserSubscriptionType subscriptiontype;
  uint64_t id;
  char *preferrednickname;
  char *email;
  char *firstname;
  char *lastname;
};
#define USER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user__descriptor) \
, USER_SUBSCRIPTION_TYPE__USER_SUBSCRIPTION_UNSPECIFIED, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * POINTER 
 */
struct  Pointer
{
  ProtobufCMessage base;
  PointerType pointertype;
  Coordinates *coordinates;
};
#define POINTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pointer__descriptor) \
, POINTER_TYPE__POINTER_TYPE_UNSPECIFIED, NULL }


struct  PointerCollection
{
  ProtobufCMessage base;
  size_t n_pointers;
  Pointer **pointers;
};
#define POINTER_COLLECTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pointer_collection__descriptor) \
, 0,NULL }


struct  Client
{
  ProtobufCMessage base;
  char *userid;
  ClientRole role;
  char *nickname;
  PointerCollection *pointers;
};
#define CLIENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&client__descriptor) \
, (char *)protobuf_c_empty_string, CLIENT_ROLE__CLIENT_ROLE_UNSPECIFIED, (char *)protobuf_c_empty_string, NULL }


struct  ClientChatMessage
{
  ProtobufCMessage base;
  char *text;
};
#define CLIENT_CHAT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&client_chat_message__descriptor) \
, (char *)protobuf_c_empty_string }


typedef enum {
  CLIENT_MESSAGE__DATA__NOT_SET = 0,
  CLIENT_MESSAGE__DATA_NICKNAME = 3,
  CLIENT_MESSAGE__DATA_POINTERS = 4,
  CLIENT_MESSAGE__DATA_CHAT_MESSAGE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIENT_MESSAGE__DATA__CASE)
} ClientMessage__DataCase;

struct  ClientMessage
{
  ProtobufCMessage base;
  uint64_t userid;
  ClientMessageType type;
  Google__Protobuf__Timestamp *timestamp;
  ClientMessage__DataCase data_case;
  union {
    char *nickname;
    PointerCollection *pointers;
    ClientChatMessage *chatmessage;
  };
};
#define CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&client_message__descriptor) \
, 0, CLIENT_MESSAGE_TYPE__CLIENT_MESSAGE_TYPE_UNSPECIFIED, NULL, CLIENT_MESSAGE__DATA__NOT_SET, {0} }


typedef enum {
  SERVER_MESSAGE__MESSAGE__NOT_SET = 0,
  SERVER_MESSAGE__MESSAGE_RELAY = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SERVER_MESSAGE__MESSAGE__CASE)
} ServerMessage__MessageCase;

struct  ServerMessage
{
  ProtobufCMessage base;
  ServerMessageType type;
  ServerMessage__MessageCase message_case;
  union {
    ClientMessage *relay;
  };
};
#define SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&server_message__descriptor) \
, SERVER_MESSAGE_TYPE__SERVER_MESSAGE_UNSPECIFIED, SERVER_MESSAGE__MESSAGE__NOT_SET, {0} }


struct  RoomConfiguration
{
  ProtobufCMessage base;
  RoomType type;
  char *id;
  char *name;
  uint64_t expiry;
  size_t n_plugins;
  char **plugins;
};
#define ROOM_CONFIGURATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&room_configuration__descriptor) \
, ROOM_TYPE__ROOM_TYPE_UNSPECIFIED, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0,NULL }


/* Coordinates methods */
void   coordinates__init
                     (Coordinates         *message);
size_t coordinates__get_packed_size
                     (const Coordinates   *message);
size_t coordinates__pack
                     (const Coordinates   *message,
                      uint8_t             *out);
size_t coordinates__pack_to_buffer
                     (const Coordinates   *message,
                      ProtobufCBuffer     *buffer);
Coordinates *
       coordinates__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   coordinates__free_unpacked
                     (Coordinates *message,
                      ProtobufCAllocator *allocator);
/* PluginDefinition methods */
void   plugin_definition__init
                     (PluginDefinition         *message);
size_t plugin_definition__get_packed_size
                     (const PluginDefinition   *message);
size_t plugin_definition__pack
                     (const PluginDefinition   *message,
                      uint8_t             *out);
size_t plugin_definition__pack_to_buffer
                     (const PluginDefinition   *message,
                      ProtobufCBuffer     *buffer);
PluginDefinition *
       plugin_definition__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plugin_definition__free_unpacked
                     (PluginDefinition *message,
                      ProtobufCAllocator *allocator);
/* PluginStoreDefinition__MembersEntry methods */
void   plugin_store_definition__members_entry__init
                     (PluginStoreDefinition__MembersEntry         *message);
/* PluginStoreDefinition methods */
void   plugin_store_definition__init
                     (PluginStoreDefinition         *message);
size_t plugin_store_definition__get_packed_size
                     (const PluginStoreDefinition   *message);
size_t plugin_store_definition__pack
                     (const PluginStoreDefinition   *message,
                      uint8_t             *out);
size_t plugin_store_definition__pack_to_buffer
                     (const PluginStoreDefinition   *message,
                      ProtobufCBuffer     *buffer);
PluginStoreDefinition *
       plugin_store_definition__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plugin_store_definition__free_unpacked
                     (PluginStoreDefinition *message,
                      ProtobufCAllocator *allocator);
/* PluginManifest__StoreEntry methods */
void   plugin_manifest__store_entry__init
                     (PluginManifest__StoreEntry         *message);
/* PluginManifest methods */
void   plugin_manifest__init
                     (PluginManifest         *message);
size_t plugin_manifest__get_packed_size
                     (const PluginManifest   *message);
size_t plugin_manifest__pack
                     (const PluginManifest   *message,
                      uint8_t             *out);
size_t plugin_manifest__pack_to_buffer
                     (const PluginManifest   *message,
                      ProtobufCBuffer     *buffer);
PluginManifest *
       plugin_manifest__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plugin_manifest__free_unpacked
                     (PluginManifest *message,
                      ProtobufCAllocator *allocator);
/* User methods */
void   user__init
                     (User         *message);
size_t user__get_packed_size
                     (const User   *message);
size_t user__pack
                     (const User   *message,
                      uint8_t             *out);
size_t user__pack_to_buffer
                     (const User   *message,
                      ProtobufCBuffer     *buffer);
User *
       user__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user__free_unpacked
                     (User *message,
                      ProtobufCAllocator *allocator);
/* Pointer methods */
void   pointer__init
                     (Pointer         *message);
size_t pointer__get_packed_size
                     (const Pointer   *message);
size_t pointer__pack
                     (const Pointer   *message,
                      uint8_t             *out);
size_t pointer__pack_to_buffer
                     (const Pointer   *message,
                      ProtobufCBuffer     *buffer);
Pointer *
       pointer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pointer__free_unpacked
                     (Pointer *message,
                      ProtobufCAllocator *allocator);
/* PointerCollection methods */
void   pointer_collection__init
                     (PointerCollection         *message);
size_t pointer_collection__get_packed_size
                     (const PointerCollection   *message);
size_t pointer_collection__pack
                     (const PointerCollection   *message,
                      uint8_t             *out);
size_t pointer_collection__pack_to_buffer
                     (const PointerCollection   *message,
                      ProtobufCBuffer     *buffer);
PointerCollection *
       pointer_collection__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pointer_collection__free_unpacked
                     (PointerCollection *message,
                      ProtobufCAllocator *allocator);
/* Client methods */
void   client__init
                     (Client         *message);
size_t client__get_packed_size
                     (const Client   *message);
size_t client__pack
                     (const Client   *message,
                      uint8_t             *out);
size_t client__pack_to_buffer
                     (const Client   *message,
                      ProtobufCBuffer     *buffer);
Client *
       client__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   client__free_unpacked
                     (Client *message,
                      ProtobufCAllocator *allocator);
/* ClientChatMessage methods */
void   client_chat_message__init
                     (ClientChatMessage         *message);
size_t client_chat_message__get_packed_size
                     (const ClientChatMessage   *message);
size_t client_chat_message__pack
                     (const ClientChatMessage   *message,
                      uint8_t             *out);
size_t client_chat_message__pack_to_buffer
                     (const ClientChatMessage   *message,
                      ProtobufCBuffer     *buffer);
ClientChatMessage *
       client_chat_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   client_chat_message__free_unpacked
                     (ClientChatMessage *message,
                      ProtobufCAllocator *allocator);
/* ClientMessage methods */
void   client_message__init
                     (ClientMessage         *message);
size_t client_message__get_packed_size
                     (const ClientMessage   *message);
size_t client_message__pack
                     (const ClientMessage   *message,
                      uint8_t             *out);
size_t client_message__pack_to_buffer
                     (const ClientMessage   *message,
                      ProtobufCBuffer     *buffer);
ClientMessage *
       client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   client_message__free_unpacked
                     (ClientMessage *message,
                      ProtobufCAllocator *allocator);
/* ServerMessage methods */
void   server_message__init
                     (ServerMessage         *message);
size_t server_message__get_packed_size
                     (const ServerMessage   *message);
size_t server_message__pack
                     (const ServerMessage   *message,
                      uint8_t             *out);
size_t server_message__pack_to_buffer
                     (const ServerMessage   *message,
                      ProtobufCBuffer     *buffer);
ServerMessage *
       server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   server_message__free_unpacked
                     (ServerMessage *message,
                      ProtobufCAllocator *allocator);
/* RoomConfiguration methods */
void   room_configuration__init
                     (RoomConfiguration         *message);
size_t room_configuration__get_packed_size
                     (const RoomConfiguration   *message);
size_t room_configuration__pack
                     (const RoomConfiguration   *message,
                      uint8_t             *out);
size_t room_configuration__pack_to_buffer
                     (const RoomConfiguration   *message,
                      ProtobufCBuffer     *buffer);
RoomConfiguration *
       room_configuration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   room_configuration__free_unpacked
                     (RoomConfiguration *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Coordinates_Closure)
                 (const Coordinates *message,
                  void *closure_data);
typedef void (*PluginDefinition_Closure)
                 (const PluginDefinition *message,
                  void *closure_data);
typedef void (*PluginStoreDefinition__MembersEntry_Closure)
                 (const PluginStoreDefinition__MembersEntry *message,
                  void *closure_data);
typedef void (*PluginStoreDefinition_Closure)
                 (const PluginStoreDefinition *message,
                  void *closure_data);
typedef void (*PluginManifest__StoreEntry_Closure)
                 (const PluginManifest__StoreEntry *message,
                  void *closure_data);
typedef void (*PluginManifest_Closure)
                 (const PluginManifest *message,
                  void *closure_data);
typedef void (*User_Closure)
                 (const User *message,
                  void *closure_data);
typedef void (*Pointer_Closure)
                 (const Pointer *message,
                  void *closure_data);
typedef void (*PointerCollection_Closure)
                 (const PointerCollection *message,
                  void *closure_data);
typedef void (*Client_Closure)
                 (const Client *message,
                  void *closure_data);
typedef void (*ClientChatMessage_Closure)
                 (const ClientChatMessage *message,
                  void *closure_data);
typedef void (*ClientMessage_Closure)
                 (const ClientMessage *message,
                  void *closure_data);
typedef void (*ServerMessage_Closure)
                 (const ServerMessage *message,
                  void *closure_data);
typedef void (*RoomConfiguration_Closure)
                 (const RoomConfiguration *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    pointer_type__descriptor;
extern const ProtobufCEnumDescriptor    store_member_type__descriptor;
extern const ProtobufCEnumDescriptor    store_access_type__descriptor;
extern const ProtobufCEnumDescriptor    store_persistence_type__descriptor;
extern const ProtobufCEnumDescriptor    user_subscription_type__descriptor;
extern const ProtobufCEnumDescriptor    client_role__descriptor;
extern const ProtobufCEnumDescriptor    client_message_type__descriptor;
extern const ProtobufCEnumDescriptor    close_code__descriptor;
extern const ProtobufCEnumDescriptor    server_message_type__descriptor;
extern const ProtobufCEnumDescriptor    room_type__descriptor;
extern const ProtobufCMessageDescriptor coordinates__descriptor;
extern const ProtobufCMessageDescriptor plugin_definition__descriptor;
extern const ProtobufCMessageDescriptor plugin_store_definition__descriptor;
extern const ProtobufCMessageDescriptor plugin_store_definition__members_entry__descriptor;
extern const ProtobufCMessageDescriptor plugin_manifest__descriptor;
extern const ProtobufCMessageDescriptor plugin_manifest__store_entry__descriptor;
extern const ProtobufCMessageDescriptor user__descriptor;
extern const ProtobufCMessageDescriptor pointer__descriptor;
extern const ProtobufCMessageDescriptor pointer_collection__descriptor;
extern const ProtobufCMessageDescriptor client__descriptor;
extern const ProtobufCMessageDescriptor client_chat_message__descriptor;
extern const ProtobufCMessageDescriptor client_message__descriptor;
extern const ProtobufCMessageDescriptor server_message__descriptor;
extern const ProtobufCMessageDescriptor room_configuration__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_Swifteams_2eproto__INCLUDED */
